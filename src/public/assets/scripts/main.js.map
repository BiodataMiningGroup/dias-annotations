{"version":3,"sources":["annotations/main.js","annotations/controllers/AnnotatorController.js","annotations/controllers/CanvasController.js","annotations/controllers/SVGController.js","annotations/services/images.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzzfile":"main.js","sourcesContent":["/**\n * @namespace dias.annotations\n * @description The DIAS annotations module.\n */\nangular.module('dias.annotations', ['dias.api']);\n","/**\n * @namespace dias.annotations\n * @ngdoc controller\n * @name AnnotatorController\n * @memberOf dias.annotations\n * @description Main controller of the Annotator application.\n */\nangular.module('dias.annotations').controller('AnnotatorController', function ($scope, $element, $attrs, images) {\n\t\t\"use strict\";\n\n\t\t$scope.images = images;\n\t\timages.init($attrs.transectId);\n\t\timages.show(parseInt($attrs.imageId));\n\t}\n);","/**\n * @namespace dias.annotations\n * @ngdoc controller\n * @name CanvasController\n * @memberOf dias.annotations\n * @description Main controller for the annotation canvas element\n */\nangular.module('dias.annotations').controller('CanvasController', function ($scope, $element) {\n\t\t\"use strict\";\n\n\t\tvar offsetTop = 0;\n\n\t\t// the current mouse position relative to the canvas container\n\t\t$scope.mouseX = 0;\n\t\t$scope.mouseY = 0;\n\n\t\t// the dimensions of the canvas container\n\t\tvar updateDimensions = function () {\n\t\t\t$scope.width = $element[0].offsetWidth;\n\t\t\t$scope.height = $element[0].offsetHeight;\n\t\t};\n\n\t\tupdateDimensions();\n\n\t\twindow.addEventListener('resize', function () {\n\t\t\t$scope.$apply(updateDimensions);\n\t\t});\n\n\t\t$scope.updateMouse = function (e) {\n\t\t\t$scope.mouseX = e.clientX;\n\t\t\t$scope.mouseY = e.clientY - offsetTop;\n\t\t};\n\n\t\tvar updateOffset = function () {\n\t\t\toffsetTop = $element[0].offsetTop;\n\t\t};\n\n\t\tupdateOffset();\n\n\t\twindow.addEventListener('resize', updateOffset);\n\t}\n);","/**\n * @namespace dias.annotations\n * @ngdoc controller\n * @name SVGController\n * @memberOf dias.annotations\n * @description Controller for the annotation canvas SVG element\n */\nangular.module('dias.annotations').controller('SVGController', function ($scope, $element) {\n\t\t\"use strict\";\n\n\t\t// the scale change per scaling operation\n\t\tvar scaleStep = 0.05;\n\t\t// the minimal scale\n\t\tvar minScale = 1;\n\t\t// is the user currently panning?\n\t\tvar panning = false;\n\t\t// translate values when panning starts\n\t\tvar panningStartTranslateX = 0;\n\t\tvar panningStartTranslateY = 0;\n\t\t// mouse position when panning starts\n\t\tvar panningStartMouseX = 0;\n\t\tvar panningStartMouseY = 0;\n\n\t\t// the current scale of the elements\n\t\t$scope.scale = 1;\n\t\t// the current translation (position) of the elements\n\t\t$scope.translateX = 0;\n\t\t$scope.translateY = 0;\n\t\t// mouse position taking zooming and translating into account\n\t\t$scope.relativeMouseX = $scope.mouseX;\n\t\t$scope.relativeMouseY = $scope.mouseY;\n\n\t\t// makes sure the translate boundaries are kept\n\t\tvar updateTranslate = function (translateX, translateY) {\n\t\t\t// scaleFactor for the right/bottom edge\n\t\t\tvar scaleFactor = 1 - $scope.scale;\n\t\t\t// right\n\t\t\ttranslateX = Math.max(translateX, $scope.width * scaleFactor);\n\t\t\t// bottom\n\t\t\ttranslateY = Math.max(translateY, $scope.height * scaleFactor);\n\t\t\t// left\n\t\t\t$scope.translateX = Math.min(translateX, 0);\n\t\t\t// top\n\t\t\t$scope.translateY = Math.min(translateY, 0);\n\t\t};\n\n\t\t// scale towards the cursor\n\t\t// see http://stackoverflow.com/a/20996105/1796523\n\t\tvar updateScaleTranslate = function (scale, oldScale) {\n\t\t\tvar scaleDifference = scale / oldScale;\n\n\t\t\tvar translateX = scaleDifference * ($scope.translateX - $scope.mouseX) + $scope.mouseX;\n\t\t\tvar translateY = scaleDifference * ($scope.translateY - $scope.mouseY) + $scope.mouseY;\n\n\t\t\tupdateTranslate(translateX, translateY);\n\t\t};\n\n\t\t$scope.$watch('scale', updateScaleTranslate);\n\n\t\tvar updateRelativeMouseX = function (mouseX) {\n\t\t\t$scope.relativeMouseX = (mouseX - $scope.translateX) / $scope.scale;\n\t\t};\n\n\t\t$scope.$watch('mouseX', updateRelativeMouseX);\n\n\t\tvar updateRelativeMouseY = function (mouseY) {\n\t\t\t$scope.relativeMouseY = (mouseY - $scope.translateY) / $scope.scale;\n\t\t};\n\n\t\t$scope.$watch('mouseY', updateRelativeMouseY);\n\n\t\tvar zoom = function (e) {\n\t\t\tvar scale = $scope.scale - scaleStep * e.deltaY;\n\t\t\t$scope.scale = Math.max(scale, minScale);\n\t\t\te.preventDefault();\n\t\t};\n\n\t\t$element.on('wheel', function (e) {\n\t\t\t$scope.$apply(function () { zoom(e); });\n\t\t});\n\n\t\t$scope.startPanning = function (event) {\n\t\t\tpanning = true;\n\t\t\tpanningStartTranslateX = $scope.translateX;\n\t\t\tpanningStartTranslateY = $scope.translateY;\n\t\t\tpanningStartMouseX = $scope.mouseX;\n\t\t\tpanningStartMouseY = $scope.mouseY;\n\n\t\t\t// prevent default drag & drop behaviour for images\n\t\t\tevent.preventDefault();\n\t\t};\n\n\t\t$scope.pan = function () {\n\t\t\tif (!panning) return;\n\n\t\t\tvar translateX = panningStartTranslateX - (panningStartMouseX - $scope.mouseX);\n\t\t\tvar translateY = panningStartTranslateY - (panningStartMouseY - $scope.mouseY);\n\n\t\t\tupdateTranslate(translateX, translateY);\n\t\t};\n\n\t\t$scope.stopPanning = function () {\n\t\t\tpanning = false;\n\t\t};\n\t}\n);","/**\n * @namespace dias.annotations\n * @ngdoc service\n * @name images\n * @memberOf dias.annotations\n * @description Manages (pre-)loading of the images to annotate.\n */\nangular.module('dias.annotations').service('images', function ($rootScope, TransectImage, URL) {\n\t\t\"use strict\";\n\n\t\t// svg namespace\n\t\tvar SVGNS = \"http://www.w3.org/2000/svg\";\n\t\tvar _this = this;\n\t\tvar imageIds = [];\n\t\tvar currentId;\n\n\t\tthis.buffer = [];\n\t\tthis.loading = true;\n\n\t\tvar getImage = function (id) {\n\t\t\tfor (var i = _this.buffer.length - 1; i >= 0; i--) {\n\t\t\t\tif (_this.buffer[i]._id == id) return _this.buffer[i];\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t};\n\n\t\tvar show = function (id) {\n\t\t\tfor (var i = _this.buffer.length - 1; i >= 0; i--) {\n\t\t\t\t_this.buffer[i]._show = _this.buffer[i]._id == id;\n\t\t\t}\n\t\t\t_this.loading = false;\n\t\t\tcurrentId = id;\n\n\t\t\t$rootScope.$broadcast('images::show', getImage(id));\n\t\t};\n\n\t\tvar hasIdInBuffer = function (id) {\n\t\t\tfor (var i = _this.buffer.length - 1; i >= 0; i--) {\n\t\t\t\tif (_this.buffer[i]._id == id) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tvar fetchImage = function (id) {\n\t\t\tif (hasIdInBuffer(id)) {\n\t\t\t\tshow(id);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_this.loading = true;\n\t\t\tvar img = document.createElement('img');\n\t\t\timg._id = id;\n\t\t\timg.onload = function () {\n\t\t\t\t_this.buffer.push(img);\n\t\t\t\tshow(id);\n\t\t\t\t$rootScope.$apply();\n\t\t\t};\n\t\t\timg.src = URL + \"/api/v1/images/\" + id + \"/file\";\n\t\t\t// var img = document.createElementNS(SVGNS, \"image\");\n\t\t\t// img.href.baseVal = URL + \"/api/v1/images/\" + 1 + \"/file\";\n\t\t\t// img.width.baseVal.value = 100;\n\t\t\t// img.height.baseVal.value = 100;\n\t\t\t// console.log(img, img2);\n\t\t};\n\n\t\t/**\n\t\t * Initializes the service for a given transect.\n\t\t */\n\t\tthis.init = function (transectId) {\n\t\t\timageIds = TransectImage.query({transect_id: transectId});\n\t\t\t\n\t\t};\n\n\t\t/**\n\t\t * Show the image with the specified ID.\n\t\t */\n\t\tthis.show = function (id) {\n\t\t\tfetchImage(id);\n\t\t};\n\n\t\t/**\n\t\t * Show the next image.\n\t\t */\n\t\tthis.next = function () {\n\t\t\tvar index = imageIds.indexOf(currentId);\n\t\t\t_this.show(imageIds[(index + 1) % imageIds.length]);\n\t\t};\n\n\t\t/**\n\t\t * Show the previous image.\n\t\t */\n\t\tthis.prev = function () {\n\t\t\tvar index = imageIds.indexOf(currentId);\n\t\t\tvar length = imageIds.length;\n\t\t\t_this.show(imageIds[(index - 1 + length) % length]);\n\t\t};\n\n\t\t/**\n\t\t * Returns the currently displayed image.\n\t\t */\n\t\tthis.current = function () {\n\t\t\treturn getImage(currentId);\n\t\t};\n\t}\n);"],"sourceRoot":"/source/"}